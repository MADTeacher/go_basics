package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤ –∏ –≤–∏–ª–æ–∫
const numPhilosophers = 5

// –§–∏–ª–æ—Å–æ—Ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞–¥–∞—á–∏
type Philosopher struct {
	id           int
	leftFork     *sync.Mutex
	rightFork    *sync.Mutex
	mealsEaten   int
	thinkingTime time.Duration
	eatingTime   time.Duration
	wg           *sync.WaitGroup
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–º
// –ü—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –¥–≤–µ –≤–∏–ª–∫–∏ –∏ –∑–∞—Ç–µ–º –µ—Å—Ç—å
func (p *Philosopher) eat() {
	defer p.wg.Done()

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∞
	for i := 0; i < 3; i++ {
		// –î—É–º–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—ã—Ç–∞—Ç—å—Å—è –≤–∑—è—Ç—å –≤–∏–ª–∫–∏
		fmt.Printf("Philosopher %d is thinking... ü§î\n", p.id)
		time.Sleep(p.thinkingTime)

		// –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∑–∞–∏–º–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
		// –ù–µ—á–µ—Ç–Ω—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—ã —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä—É—Ç –ª–µ–≤—É—é –≤–∏–ª–∫—É, —á–µ—Ç–Ω—ã–µ - –ø—Ä–∞–≤—É—é
		if p.id%2 == 0 {
			// –ß–µ—Ç–Ω—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—ã: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤–∞—è, –ø–æ—Ç–æ–º –ª–µ–≤–∞—è –≤–∏–ª–∫–∞
			p.rightFork.Lock()
			fmt.Printf("Philosopher %d picked up right fork üç¥\n", p.id)
			// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
			time.Sleep(10 * time.Millisecond)

			p.leftFork.Lock()
			fmt.Printf(
				"Philosopher %d picked up left fork and started eating\n",
				p.id,
			)
		} else {
			// –ù–µ—á–µ—Ç–Ω—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—ã: —Å–Ω–∞—á–∞–ª–∞ –ª–µ–≤–∞—è, –ø–æ—Ç–æ–º –ø—Ä–∞–≤–∞—è –≤–∏–ª–∫–∞
			p.leftFork.Lock()
			fmt.Printf("Philosopher %d picked up left fork üç¥üòä\n", p.id)
			time.Sleep(10 * time.Millisecond)

			p.rightFork.Lock()
			fmt.Printf(
				"Philosopher %d picked up right fork and started eating üç¥üòä\n",
				p.id,
			)
		}

		// –ü—Ä–∏–µ–º –ø–∏—â–∏
		fmt.Printf("Philosopher %d is eating... üçΩÔ∏èüòã\n", p.id)
		time.Sleep(p.eatingTime)
		p.mealsEaten++

		// –ö–ª–∞–¥–µ–º –≤–∏–ª–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç–æ–ª
		p.leftFork.Unlock()
		p.rightFork.Unlock()
		fmt.Printf(
			"Philosopher %d put down forks and finished eating (%d times) ‚úì\n",
			p.id, p.mealsEaten,
		)
	}

	fmt.Printf("Philosopher %d finished dining and left the table üëã\n", p.id)
}

func main() {
	rnd := rand.New(rand.NewSource(time.Now().UnixNano()))

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω
	var wg sync.WaitGroup

	// –°–æ–∑–¥–∞–µ–º –≤–∏–ª–∫–∏ (–º—å—é—Ç–µ–∫—Å—ã)
	forks := make([]*sync.Mutex, numPhilosophers)
	for i := 0; i < numPhilosophers; i++ {
		forks[i] = &sync.Mutex{}
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤
	philosophers := make([]*Philosopher, numPhilosophers)
	for i := 0; i < numPhilosophers; i++ {
		// –ö–∞–∂–¥—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∏–ª–∫–µ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
		leftForkIndex := i
		rightForkIndex := (i + 1) % numPhilosophers
		thinkingTime := time.Duration(rnd.Intn(500)+100) * time.Millisecond
		eatingTime := time.Duration(rnd.Intn(300)+200) * time.Millisecond
		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
		philosophers[i] = &Philosopher{
			id:           i,
			leftFork:     forks[leftForkIndex],
			rightFork:    forks[rightForkIndex],
			mealsEaten:   0,
			thinkingTime: thinkingTime,
			eatingTime:   eatingTime,
			wg:           &wg,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–∞ –≤ –≥—Ä—É–ø–ø—É –æ–∂–∏–¥–∞–Ω–∏—è
		wg.Add(1)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö
	fmt.Println("Philosophers are sitting at the table... ü™ëü™ëü™ë")
	for i := 0; i < numPhilosophers; i++ {
		go philosophers[i].eat()
	}

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–ø–µ–∑—ã –≤—Å–µ—Ö —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤
	wg.Wait()
	fmt.Println("All philosophers have finished dining! üéâ")

	// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
	for i, p := range philosophers {
		fmt.Printf("Philosopher %d ate %d times üçΩÔ∏è\n", i, p.mealsEaten)
	}
}
